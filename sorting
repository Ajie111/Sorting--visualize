import tkinter as tk
import matplotlib.pyplot as plt
from tkinter import ttk
from tkinter.messagebox import showinfo
import re
PAUSE_TIME = 0.2

def go(*args):  #处理事件，*args表示可变参数
    global PAUSE_TIME
    PAUSE_TIME = eval(comboxlist.get()) #打印选中的值

# 冒泡算法
def bubble_sort():
    nums = []
    texts = entry_1.get()   # 从entry获得的数据必须得转换成列表类型
    try:
        if texts == '':
            showinfo(message="请输入数据")
        elif texts[0].isdigit() == False:
            showinfo(message="请输入正确的数据")
        else:
            texts = re.split(',|，',texts)
            for text in texts:
                nums.append(eval(text))
            plt.bar(range(len(nums)), nums, align='center')
            for a, b in zip(range(len(nums)), nums):
                plt.text(a, b + 0.05, '%.3f' % b)
            plt.pause(PAUSE_TIME)
            for i in range(len(nums) - 1):
                for j in range(len(nums) - i - 1):
                    if nums[j] > nums[j + 1]:
                        nums[j], nums[j + 1] = nums[j + 1], nums[j]
                    plt.cla()  # 清除内容
                    plt.bar(range(len(nums)), nums, align='center')
                    for a, b in zip(range(len(nums)), nums):
                        plt.text(a, b + 0.05, '%.3f' % b)
                    plt.bar(j, nums[j], color="r", align="center")
                    plt.text(j, nums[j] + 0.05, '%.0f' % nums[j])
                    plt.bar(j + 1, nums[j + 1], color="r", align="center")
                    plt.text(j + 1, nums[j + 1] + 0.05, '%.3f' % nums[j + 1])
                    plt.pause(PAUSE_TIME)
            plt.show()
    except(SyntaxError):
        showinfo(message="请输入正确的数据")
    except(NameError):
        showinfo(message="请输入正确的数据")
    except(Exception):
        pass

# 插入排序
def insert_sort():
    nums = []
    texts = entry_1.get()
    try:
        if texts == '':
            showinfo(message="请输入数据")
        elif texts[0].isdigit() == False:
            showinfo(message="请输入正确的数据")
        else:
            texts = re.split(',|，', texts)
            for text in texts:
                nums.append(eval(text))
            plt.bar(range(len(nums)), nums)
            for a, b in zip(range(len(nums)), nums):
                plt.text(a, b + 0.05, '%.3f' % b)
            plt.pause(PAUSE_TIME)
            for i in range(1, len(nums)):
                # 将该元素(j+1)与已排序好的元素(j)从右到左依次比较,如果比该元素(j)小,则交换
                # range(i-1,-1,-1)
                for j in range(i - 1, -1, -1):
                    if nums[j] > nums[j + 1]:
                        nums[j], nums[j + 1] = nums[j + 1], nums[j]
                    plt.cla()  # 清除内容
                    plt.bar(range(len(nums)), nums, align='center')
                    for a, b in zip(range(len(nums)), nums):
                        plt.text(a, b + 0.05, '%.3f' % b)
                    plt.bar(j, nums[j], color="r", align="center")
                    plt.text(j, nums[j] + 0.05, '%.3f' % nums[j])
                    plt.bar(j + 1, nums[j + 1], color="r", align="center")
                    plt.text(j + 1, nums[j + 1] + 0.05, '%.3f' % nums[j + 1])
                    plt.pause(PAUSE_TIME)
            plt.show()
    except(SyntaxError):
        showinfo(message="请输入正确的数据")
    except(NameError):
        showinfo(message="请输入正确的数据")
    except(Exception):
        pass

# 选择排序
def selection_sort():
    nums = []
    texts = entry_1.get()  # 从entry获得的数据必须得转换成列表类型
    try:
        if texts == '':
            showinfo(message="请输入数据")
        elif texts[0].isdigit() == False:
            showinfo(message="请输入正确的数据")
        else:
            texts = re.split(',|，', texts)
            for text in texts:
                nums.append(eval(text))
            plt.bar(range(len(nums)), nums)
            for a, b in zip(range(len(nums)), nums):
                plt.text(a, b + 0.05, '%.3f' % b)
            plt.pause(PAUSE_TIME)
            for i in range(0, len(nums)):
                min_ = i
                for j in range(i + 1, len(nums)):
                    if nums[j] < nums[min_]:
                        min_ = j
                    plt.cla()  # 清除内容
                    plt.bar(range(len(nums)), nums, align='center')
                    for a, b in zip(range(len(nums)), nums):
                        plt.text(a, b + 0.05, '%.3f' % b)
                    plt.bar(i, nums[i], color="r", align="center")
                    plt.text(i, nums[i] + 0.05, '%.3f' % nums[i])
                    plt.bar(j, nums[j], color="r", align="center")
                    plt.text(j, nums[j] + 0.05, '%.3f' % nums[j])
                    plt.pause(PAUSE_TIME)
                nums[i], nums[min_] = nums[min_], nums[i]
                plt.cla()
                plt.bar(range(len(nums)), nums)
                for a, b in zip(range(len(nums)), nums):
                    plt.text(a, b + 0.05, '%.3f' % b)
            plt.show()
    except(SyntaxError):
        showinfo(message="请输入正确的数据")
    except(NameError):
        showinfo(message="请输入正确的数据")
    except(Exception):
        pass

window = tk.Tk()
window.title("动态排序算法可视化")
window.geometry('1200x600')
label = tk.Label(window,text="请输入以逗号分割的数列：",font=("宋体",15))
label.place(x=500,y=350)
label_2 = tk.Label(window,text="数据交换速率：",font=("宋体",16))
label_2.place(x=500,y=150)
comvalue=tk.StringVar()#窗体自带的文本，新建一个值
comboxlist=ttk.Combobox(window,textvariable=comvalue,width=40) #初始化
comboxlist["values"]=("0.2","0.5","0.8","1","1.5","2")
comboxlist.current(0) #选择第一个
comboxlist.bind("<<ComboboxSelected>>",go) #绑定事件,(下拉列表框被选中时，绑定go()函数)
comboxlist.place(x=660,y=147,height=30)
entry_1 = tk.Entry(window,font = "宋体")
entry_1.place(x=745, y=350,width=400,height = 30)
Bt1 = tk.Button(window,text='冒泡排序',width=40,height=3,command=bubble_sort)   #调用的时候只需函数名
Bt2 = tk.Button(window,text='插入排序',width=40,height=3,command=insert_sort)   #并不需要加括号
Bt3 = tk.Button(window,text='选择排序',width=40,height=3,command=selection_sort)
Bt1.place(x = 100,y = 60)
Bt2.place(x = 100,y = 260)
Bt3.place(x = 100,y = 460)
window.mainloop()
